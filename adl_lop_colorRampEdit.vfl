// This gets around Solaris' lack of support for overriding the color ramp data of various render engines.
// adl_lop_colorRampEdit.vfl, by Andrew Louda
// Modified: 2024-05-24 - Added support for Renderman
// Copyright 2024 Andrew Louda. This file is licensed under the Apache 2.0 license.
// SPDX-License-Identifier: Apache-2.0

// Currently supported render engines:
// Arnold
// Redshift
// Renderman

// Set this node's prim pattern to the target ramp material primitive (or wildcard, if desired)
// If your render engine of choice is not already supported here, there is a good chance it stores it's color ramps
// in a similar way. It is likely as simple as figuring out the renderer-specific primitive attribute names
// of the relevant arrays.

// Main Settings
string target_render_engine = chs("target_render_engine"); // [[ menu_items=('Arnold','Redshift','Renderman') ]]

string rampname = "new_ramp";
vector(chramp( "new_ramp", 0));

// Configure variables for writing and reading ramp values
vector values[]; float positions[]; string basis_strings[]; int basis_ints[];

// Write the target ramp to it's respective arrays
vector value; float position; string basis = ".";
int keyindex = 1;
while( basis != ""){
    value = set( chf( concat(rampname, itoa(keyindex), "cr") ), chf( concat(rampname, itoa(keyindex), "cg") ), chf( concat(rampname, itoa(keyindex), "cb") ));
    position = chf( concat(rampname, itoa(keyindex), "pos") );
    basis = chs( concat(rampname, itoa(keyindex), "interp") );
    if(basis == "") break;
    append( values, value); append( positions, position); append(basis_strings, basis);
    if( basis == "constant") append( basis_ints, 0);
    else if( basis == "linear") append( basis_ints, 1);
    else if( basis == "catmull-rom") append( basis_ints, 2);
    else if( basis == "monotonecubic") append( basis_ints, 3);
    else if( basis == "bezier") append( basis_ints, 4);
    else if( basis == "bspline") append( basis_ints, 5);
    else if( basis == "hermite") append( basis_ints, 6);
    else{ 
        print_once("Unexpected basis value!\n");
        append( basis_ints, 1);
    }
    keyindex += 1;
}

// ------------------------------------------------
// Writing attributes for Arnold's ramp format
if( target_render_engine == 'Arnold' ){
    usd_setattrib(0, @primpath, "inputs:color", values);
    usd_setattrib(0, @primpath, "inputs:position", positions);
    usd_setattrib(0, @primpath, "inputs:interpolation", basis_ints);
}


// ------------------------------------------------
// Writing attributes for Redshift's ramp format
// Uncomment below for backcompat with older versions of RS ( <3.6.0 ). Explained below.
// #define rs_legacyBasis
if( target_render_engine == 'Redshift' ){
    usd_setattrib(0, @primpath, "inputs:ramp", len(values));
    usd_setattrib(0, @primpath, "inputs:ramp_values", values);
    usd_setattrib(0, @primpath, "inputs:ramp_keys", positions);

    #ifdef rs_legacyBasis
    // Redshift's versions below 3.6.0 only grab the first basis value, so this replicates it's behavior
    usd_setattrib(0, @primpath, "inputs:ramp_basis", basis_strings[0]);
    #else
    usd_setattrib(0, @primpath, "inputs:ramp_basis", basis_strings);
    #endif
}


// ------------------------------------------------
// Writing attributes for Renderman's ramp format
if( target_render_engine == 'Renderman' ){
    usd_setattrib(0, @primpath, "inputs:colorRamp", len(values));
    usd_setattrib(0, @primpath, "inputs:colorRamp_Colors", values);
    usd_setattrib(0, @primpath, "inputs:colorRamp_Knots", positions);
    // Similar to older Redshift versions, Renderman presently only supports a single string value for interpolation
    usd_setattrib(0, @primpath, "inputs:colorRamp_Interpolation", basis_strings[0]);
}