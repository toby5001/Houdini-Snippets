// This constrains incoming velocity to being relative to a target surface, along with attracting the particles to the nearest surface.
// adl_pop_velocityToSurface.vfl, by Andrew Louda
// Modified: 2024-08-07 - Added support for falloff
// Copyright 2024 Andrew Louda. This file is licensed under the Apache 2.0 license.
// SPDX-License-Identifier: Apache-2.0

// This expects the second input for this wrangle to be the target geometry you want to keep the particles constrained to
// The snippet should either work in a POP wrangle or a geometry wrangle set to Points
// For added detail and interesting behavior combine this with a popgrains and a static collider

// Get nearest surface primitive and coordinates alongside it's corresponding distance
int surface_prim; vector surface_uvw;
float dist = xyzdist(1, v@P, surface_prim, surface_uvw);

vector nearN = primuv(1, 'N', surface_prim, surface_uvw);
vector nearP = primuv(1, 'P', surface_prim, surface_uvw);

float falloff = 1;
if(chi('enable_falloff')){ // [[type=toggle]]
    // folder[[name=distance_falloff, type=collapsible, tags={'sidefx::header_toggle':'enable_falloff'}, disablewhen='{ enable_falloff != 1 }']]
    falloff = fit(dist,chf('falloff_start'),chf('falloff_start')+chf('falloff_length'),1,0); // [[parm=falloff_start,default=0.256,folder=distance_falloff]] [[parm=falloff_length,default=0.256,folder=distance_falloff]]
    falloff = chramp('remap_falloff',falloff); // [[folder=distance_falloff]]
}

// Restrict the input velocity to be tangent to the surface normal, blending with the original by a user-defined value.
v@v = v@v - lerp(0,(nearN*dot(v@v,nearN)), falloff*chf('velocity_constraint_blend') ); // [[default=1]]

// This functions as a form of local gravity to push particles in the direction of the nearest surface.
v@v += falloff * dist * normalize(nearP - v@P) * chf('surface_attract_scale'); // [[max=8,default=1]]