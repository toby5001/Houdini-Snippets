// This constrains incoming velocity to being relative to a target surface, along with attracting the particles to the nearest surface.
// adl_pop_velocityToSurface.vfl, by Andrew Louda
// Modified: 2024-10-24 - Added additional functionality for handling animated surfaces and refactored interface
// Copyright 2024 Andrew Louda. This file is licensed under the Apache 2.0 license.
// SPDX-License-Identifier: Apache-2.0

// This expects the second input for this wrangle to be the target geometry you want to keep the particles constrained to
// For the velocity functionalities to work, there needs to be a vector "v" attribute present.
// The snippet should either work in a POP wrangle or a geometry wrangle set to Points
// For added detail and interesting behavior combine this with a popgrains and a static collider

// Get nearest surface primitive and coordinates alongside it's corresponding distance
int surface_prim; vector surface_uvw;
float dist = xyzdist(1, v@P, surface_prim, surface_uvw);

vector nearN = primuv(1, 'N', surface_prim, surface_uvw);
vector nearP = primuv(1, 'P', surface_prim, surface_uvw);

// folder[[name=main_parameters, label=Main, type=tabs,independent=1, ends_tab_group=1]]
// folder[[name=details, type=tabs, ends_tab_group=1, independent=1]]

// folder[[name=distance_falloff, parent_folder=details, label="Distance-Based Falloff", type=collapsible, tags={'sidefx::header_toggle':'enable_falloff'}, disablewhen='{ enable_falloff != 1 }']]
float falloff = 1.; float attract_falloff = 1.;
if(chi('enable_falloff')){ // [[type=toggle,folder=details]]
    falloff = fit(dist,chf('falloff_start'),chf('falloff_start')+chf('falloff_length'),1,0); // [[parm=falloff_start,default=0.0064,folder=distance_falloff]] [[parm=falloff_length,default=0.128,folder=distance_falloff]]
    falloff = chramp('remap_falloff',falloff); // [[folder=distance_falloff]]
    attract_falloff = chi('invert_attract_falloff') ? 1-falloff : falloff; // [[folder=distance_falloff,type=toggle,default=1]]
}
// export the falloff attribute for debugging and potential use in other parts of the network
f@surface_falloff = falloff;

// Restrict the input velocity to be tangent to the surface normal, blending with the original by a user-defined value.
// folder[[name=velocity_surface_constraint,type=simple,parent_folder=main_parameters,independent=1]]
v@v = v@v - lerp(0,(nearN*dot(v@v,nearN)), falloff*chf('v_constraint_blend') ); // [[label='Velocity Blend',folder=velocity_surface_constraint,default=1]]


// folder[[name=surface_attraction, type=simple, parent_folder=main_parameters]]
vector attract = attract_falloff * dist * normalize(nearP - v@P) * chf('surface_attract_scale'); // [[folder=surface_attraction, max=10, default=1]]
int attract_type = chi('attract_type'); // [[folder=surface_attraction, type=menu, menu_items=('Simple Add to Velocity', 'Update Force')]]
if(attract_type==0){
// Simply adds attract to the current velocity
    // This functions as a form of local gravity to push particles in the direction of the nearest surface.
    v@v += attract ;
}
// folder[[ name=updateforce, parent_folder=surface_attraction, type=borderless, hidewhen='{ attract_type != 1 }']]
else if( attract_type==1 ){
    // Methodology adapted from the popadvectbyvolumes popadvect vop advection methods
    float mass = chi('ignore_mass') ? 1. : point(0,'mass',@elemnum); // [[folder=updateforce,type=toggle,default=1,]]

    int as_wind = chi('as_wind'); // [[folder=updateforce, type=toggle]]
    if( as_wind == 0){
        float forcescale = chf('force_scale'); // [[folder=updateforce, default=1, max=10, hidewhen='{ as_wind != 0 }']]
        setpointattrib(0, 'force', @elemnum, attract * forcescale * mass , 'add');
    }
    else{
        float airresist = chf('air_resist'); // [[folder=updateforce, default=1, max=10, hidewhen='{ as_wind != 1 }']]
        airresist *= mass;
        vector incoming_wind = point(0,'targetv',@elemnum);
        float incoming_airresist = point(0,'airresist',@elemnum);
        float airresist_combined = airresist + incoming_airresist;
        setpointattrib(0, 'targetv', @elemnum, ((attract * airresist) + (incoming_wind * incoming_airresist)) / airresist_combined, 'set');
        setpointattrib(0, 'airresist', @elemnum, airresist_combined, 'set');
    }
}


if(chi('enable_velocity_based')){ // [[type=toggle,folder=details]]
// folder[[name=velocity_functionality, parent_folder=details, label='Surface Velocity Functionality', type=collapsible, tags={'sidefx::header_toggle':'enable_velocity_based'}, disablewhen='{ enable_velocity_based != 1 }' ]]

    // Get relevant attributes for velocity and speed, saving the velocity to be read on the next frame to calculate acceleration
    vector nearv = primuv(1, 'v', surface_prim, surface_uvw);
    vector nearv_accel = nearv - v@__nearv_last;
    v@__nearv_last = nearv;

    // Add the nearest surface velocity to the current velocity, taking in to account falloff
    v@v += falloff * nearv_accel * chf('surface_velocity_contribution'); // [[label='Velocity Contribution',folder=velocity_functionality, default=1]]

    // Limit the speed by the speed of the input surface (requires speed attribute)
    /*  For the right situation, this is an incredibly powerful parameter, but the max speed minimum must be
        properly set, or else all movement will be limited when the surface stops moving */
    if(chi('enable_speed_limit')){ // [[label='Limit Speed by Surface Velocity', type=toggle,default=1,folder=velocity_functionality]]
        // folder[[parent_folder=velocity_functionality, name=limit_speed_by_surface, type=borderless, tags={'sidefx::header_toggle':'enable_speed_limit'}, disablewhen='{ enable_speed_limit == 0 }{ enable_velocity_based == 0 }']]
        float speedfloor = chf('max_speed_minimum'); // [[min=0,max=1,default=0.5,folder=limit_speed_by_surface,help='This defines the minimum value allowed for the speedmax attribute.']]
        int speed_method = chi('max_speed_method'); /* [[folder=limit_speed_by_surface,type=menu,menu_items=('Add Minimum to Surface Speed','Scaled Surface Speed, at least Minimum' ), help=
"""There are two combination methods to define the speedmax attribute:
    Add Minimum to Surface Speed: Adds the nearest surface's speed with the Max Speed Minimum.
    Scaled Surface Speed, at least Minimum: Choses the maximum value from either the current surface speed scaled by a certain amount, or the Max Speed Minimum.
    In both cases, it is ensure that at the very least, the maximum speed is whatever the Max Speed Minimum is set to."""]] */

        // float nearspeed = length(nearv);
        float nearspeed = primuv(1, 'speed', surface_prim, surface_uvw);
        float speedmax;
        if(speed_method==0){
            speedmax = speedfloor + nearspeed;
        }
        else if(speed_method==1){
            // limit the speed to a scaled amount of the current surface speed, but maintaining a minimum speed (defined by max speed floor)
            speedmax = max( speedfloor, nearspeed*chf('surface_multiplier')); // [[min=1,max=10,default=5,folder=limit_speed_by_surface,disablewhen='{ max_speed_method != 1 }']]
        }
        setpointattrib(0,'speedmax', @elemnum, speedmax, 'set');
    }
}