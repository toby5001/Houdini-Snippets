// Sets a camera's focus distance by a given object, with support for blending between a preexisting focal point, and offsetting.
// adl_lop_focusToObject.vfl, by Andrew Louda
// Modified: 2024-10-27 - Updated to new paramter syntax
// Copyright 2024 Andrew Louda. This file is licensed under the Apache 2.0 license.
// SPDX-License-Identifier: Apache-2.0

string focusPrimPath = chs("focus_primitive");  // [[ preset='lopPrimSelect' ]]
int focusMethod = chi("focus_method");  // [[ join_with_next=1, menu_pairs={'primWorldPos':'Primitive World Position','primCentroid':'Primitive Centroid'} ]]
string focusPrimPurpose = chs("focus_prim_purpose");  // [[ default='default', hide_when="{ focus_method != 1 }", menu_items=('default','proxy','render','guide') ]]

int enableBlend = chi("enable_blend");  // [[is_toggle, default=0, join_with_next=1]]
float focusBlend = chf("focus_blend");  // [[default=1, min=0, max=1, disable_when='{ enable_blend != 1 }', min_is_strict=1, max_is_strict=1]]
float focusOffset = chf("focus_offset");  // [[min=-1, max=1]]

if( enableBlend && focusBlend == 0){
}
else{
    // Get world position and matrix of the operating primitive (presumably a camera)
    matrix camXform = usd_worldtransform(0, @primpath);
    vector camPos = cracktransform(0, 0, 0, 0, camXform);
    
    // Get world xform matrix for focus prim
    matrix focusXform = usd_worldtransform(0, focusPrimPath);

    // Init focus distance
    float focusDistance = 1;

    if( focusMethod == 0){
        vector focusPos = cracktransform(0, 0, 0, 0, focusXform);      
        focusDistance = length(distance(camPos,focusPos));
    }
    else if( focusMethod == 1){
        vector focusPos = usd_getbbox_center(0, focusPrimPath, focusPrimPurpose);
        // apply focus prim's matrix to get centroid to world space
        focusPos *= focusXform;
        focusDistance = length(distance(camPos,focusPos));
    }

    // Add offset and blend between preexisting focus value
    focusDistance += focusOffset;
    if( enableBlend ){
        float manualFocus = usd_attrib(0, @primpath, 'focusDistance');
        focusDistance = lerp( manualFocus, focusDistance, focusBlend);
    }

    // Apply focus distance
    usd_setattrib(0, @primpath, 'focusDistance', focusDistance);
}