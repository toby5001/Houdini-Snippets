// Inspired by the post-processing system that comes with the maxon noise system. This allows for per-shading-point variation and use outside of maxon noise.
// adl_sop_mxPost.vfl, by Andrew Louda
// Modified: 2024-10-27 - Updated to new paramter syntax
// Copyright 2022 Andrew Louda. This file is licensed under the Apache 2.0 license.
// SPDX-License-Identifier: Apache-2.0

// This is a port of the adl_mxPost OSL code and some functions have been exchanged for inbuilt VEX functions 

/*
    This script can optionally make use of (and is a bit nicer with) the custom parameter parser I've implemented into vexpressionmenu.py
    It is intended to be similar in purpose to OSL's interface configuration system. This allows for 
    default states and ranges for individual parameters to be declared within VEX code, allowing for completely self-contained 
    interfaces without need for HDAs.
*/

float mx_Cycle(float In, fmodval, cycles_phase; int smoothcycles){
    float outval;
    float fmod_setup(float In, fmodval, cycles_phase){ return abs((In+cycles_phase/fmodval*2) % (1/(fmodval*0.5)) * (fmodval*0.5)); }
    float rerange(float val){ return 1-(abs(val-0.5)*2.0); }
    //This is not a pixel-perfect match with the smoothing used within maxon noise's cycles, but it's incredibly close. This function is seemingly identical to the inbuilt smoothstep function.
    float BezierBlend(float t){ return t * t * (3.0 - 2.0 * t); }
    if(fmodval >= 1){
        outval = fmod_setup( In, fmodval, cycles_phase);
        outval = rerange(outval);
        if(smoothcycles){
            outval = BezierBlend(outval);
        }
    }
    else{
        outval = fmod_setup( In, 1, cycles_phase);
        outval = rerange(outval);
        if(smoothcycles){
            outval = BezierBlend(outval);
        }
        outval = lerp(In, outval, fmodval);
    }
    return outval;
}

float mx_Clip(float colorcomp, lowclip, highclip){
    float Out;
    if(lowclip == highclip){
        Out = colorcomp>=lowclip?1:0;
    }
    else{
        Out = fit(colorcomp, lowclip, highclip, 0, 1);
    }
    return Out;
}

float mx_Brightness(float In, brightness){
    float Out = clamp(In + brightness, 0, 1);
    return Out;
}

float mx_Contrast(float colorcomp, contrast){
    float colorout;
    if(contrast==1){
        colorout = colorcomp>=0.5?1:0;
    }
    else if(contrast>0){
        float distance = (1-contrast)/2;        
        colorout = fit(colorcomp, 0.5-distance, 0.5+distance, 0, 1);
    }
    else if(contrast==-1){
        colorout = 0.5;
    }
    else if(contrast<=0){
        float distance = (contrast*-1)/2;
        colorout = fit(colorcomp, 0, 1, 0+distance, 1-distance);
    }
    return colorout;
}

string target_attibute = chs('target_attribute'); // [[default=targetattribute, preset=attribSelectFloat]]

float cycles = chf('cycles');                                   // [[parm='cycles', default=0, min=0, max=10, join_with_next=1, disable_when='{ cycles_mode == 1 }' ]]
int cycles_mode = chi('cycles_mode');                           // [[parm='cycles_mode', is_label_hidden=1, menu_items=('Constant','Attribute') ]]
string cycles_attribute = chs('cycles_attribute');              // [[parm='cycles_attribute', default='cycles', preset=attribSelect, hide_when='{ cycles_mode == 0 }' ]]
if(cycles_mode==1) cycles = getattrib(0,chs('class'),cycles_attribute,@elemnum,0);

float cycles_phase = chf('cycles_phase');                       // [[parm='cycles_phase', default=0, min=-1, max=1, join_with_next=1, disable_when='{ cycles_phase_mode == 1 }' ]]
int cycles_phase_mode = chi('cycles_phase_mode');               // [[parm='cycles_phase_mode', is_label_hidden=1, menu_items=('Constant','Attribute') ]]
string cycles_phase_attribute = chs('cycles_phase_attribute');  // [[parm='cycles_phase_attribute', default='cycles_phase', preset=attribSelect, hide_when='{ cycles_phase_mode == 0 }' ]]
if(cycles_phase_mode==1) cycles_phase = getattrib(0,chs('class'),cycles_phase_attribute,@elemnum,0);

int smoothcycles = chi('smooth_cycles');                        // [[parm='smooth_cycles',is_toggle,default=1]]

float lowclip = chf('low_clip');                                // [[parm='low_clip', default=0, min=0, max=1, max_is_strict=1, max_is_strict=1, join_with_next=1, disable_when='{ lowclip_mode == 1 }' ]]
int lowclip_mode = chi('lowclip_mode');                         // [[parm='lowclip_mode', is_label_hidden=1, menu_items=('Constant','Attribute') ]]
string lowclip_attribute = chs('low_clip_attribute');           // [[parm='low_clip_attribute', default='lowclip', preset=attribSelect, hide_when='{ lowclip_mode == 0 }' ]]
if(lowclip_mode==1) lowclip = getattrib(0,chs('class'),lowclip_attribute,@elemnum,0);

float highclip = chf('high_clip');                              // [[parm='high_clip', default=1, min=0, max=1, max_is_strict=1, max_is_strict=1, join_with_next=1, disable_when='{ highclip_mode == 1 }' ]]
int highclip_mode = chi('highclip_mode');                       // [[parm='highclip_mode', is_label_hidden=1, menu_items=('Constant','Attribute') ]]
string highclip_attribute = chs('high_clip_attribute');         // [[parm='high_clip_attribute', default='highclip', preset=attribSelect, hide_when='{ highclip_mode == 0 }' ]]
if(highclip_mode==1) highclip = getattrib(0,chs('class'),highclip_attribute,@elemnum,0);

float brightness = chf('brightness');                           // [[parm='brightness', default=0, min=-1, max=1, max_is_strict=1, max_is_strict=1, join_with_next=1, disable_when='{ brightness_mode == 1 }' ]]
int brightness_mode = chi('brightness_mode');                   // [[parm='brightness_mode', is_label_hidden=1, menu_items=('Constant','Attribute') ]]
string brightness_attribute = chs('brightness_attribute');      // [[parm='brightness_attribute', default='brightness', preset=attribSelect, hide_when='{ brightness_mode == 0 }' ]]
if(brightness_mode==1) brightness = getattrib(0,chs('class'),brightness_attribute,@elemnum,0);

float contrast = chf('contrast');                               // [[parm='contrast', default=0, min=-1, max=1, max_is_strict=1, max_is_strict=1, join_with_next=1, disable_when='{ contrast_mode == 1 }' ]]
int contrast_mode = chi('contrast_mode');                       // [[parm='contrast_mode', is_label_hidden=1, menu_items=('Constant','Attribute') ]]
string contrast_attribute = chs('contrast_attribute');          // [[parm='contrast_attribute', default='contrast', preset=attribSelect, hide_when='{ contrast_mode == 0 }' ]]
if(contrast_mode==1) contrast = getattrib(0,chs('class'),contrast_attribute,@elemnum,0);

#define fallbackAttrib f@`chs('target_attribute')`
#if `ch('class')` // [[parm='class',is_hidden=1]]
float value = getattrib(0,chs('class'),target_attibute,@elemnum,0);
#else
float value = fallbackAttrib;
#endif

if(cycles>0){
    value = mx_Cycle(value,cycles,cycles_phase,smoothcycles);
}
if(lowclip > 0 || highclip < 1){
    value = mx_Clip(value,lowclip,highclip);
}
if(brightness != 0){
    value = mx_Brightness(value,brightness);
}
if(contrast != 0){
    value = mx_Contrast(value,contrast);
}

#if `ch('class')`
setattrib(0,chs('class'),target_attibute,@elemnum,@vtxnum,value,'set');
#else
fallbackAttrib = value;
#endif